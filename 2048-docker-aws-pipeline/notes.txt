Deploying the 2048 Game Using Docker, AWS ECR, ECS Fargate, CodeBuild, and CodePipeline
=======================================================================================

Starting Off: Installing Tools
------------------------------
Before starting this project, I made sure I had Docker and the AWS CLI installed and updated on my machine. These were necessary because I needed to build Docker images locally and interact with AWS services through the CLI.

After that, I created access keys in the AWS IAM console. With those, I ran:

    aws configure

This configured my AWS credentials so I could use the CLI.

Cloning the Code & Building the Docker Image
--------------------------------------------
I cloned the GitHub repo that contained the 2048 game:

    git clone <your-repo-url>
    cd <project-folder>

Then I built the Docker image:

    docker build -t 2048-game .

This packaged the app into a Docker image named '2048-game'.

Setting Up ECR and Pushing the Image
------------------------------------
I created an ECR repository in the AWS Console.

Then I tagged my image with the ECR URI:

    docker tag 2048-game:latest <ECR_URI>:latest

I logged into ECR:

    aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin <ECR_URI>

Note: I had to change the region to match the one where my ECR repo was created.

After logging in, I pushed the image:

    docker push <ECR_URI>:latest

I checked the ECR Console to confirm the image was there.

Creating Roles for ECS
----------------------
I created an IAM role for ECS:

- Went to IAM > Roles > Create role
- Selected AWS Service as the trusted entity
- Chose "Elastic Container Service" as the use case
- Named it `AWSServiceRoleForECS`

ECS Cluster & Task Setup
------------------------
I went to ECS > Clusters > Create Cluster:
- Named it `2048-game-cluster`
- Infrastructure: AWS Fargate
- Left all defaults and created the cluster

Registering the Task Definition
-------------------------------
In ECS > Task Definitions > Create New:
- Launch type: Fargate
- Added a container with the ECR image URI
- Set port mappings: 80 → 80
- Created the task definition

Creating the ECS Service
------------------------
In the ECS cluster I created earlier:
- Went to the Services tab and clicked "Create"
- Launch type: FARGATE
- Task Definition: `2048-game-task`
- Service name: `2048-service`
- Number of tasks: 1
- Network: selected default VPC and subnets, enabled Public IP
- Security group: allowed HTTP (port 80)

After creating the service:
- I went to the cluster → Tasks tab → clicked on the running task
- Under the Networking tab, I found the public IP
- I visited http://<Public-IP>:80 to test — the game was live!

Setting Up CodeBuild
--------------------
I updated `buildspec.yml` to build, tag, and push the Docker image.

Created an IAM role for CodeBuild and attached these policies:
- AmazonEC2ContainerRegistryFullAccess
- AWSCodeBuildDeveloperAccess
- AmazonS3FullAccess

Then I added an inline policy to allow ECS updates:

    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "ecs:UpdateService",
                    "ecs:DescribeServices"
                ],
                "Resource": "<ECS_SERVICE_ARN>"
            }
        ]
    }

I got the ECS Service ARN from ECS > Clusters > Services.

Setting Up S3 for Artifacts
---------------------------
I created an S3 bucket called `2048-ci-cd-pipeline-artifacts1` to store build outputs like Docker images and logs.

Creating the CodeBuild Project
------------------------------
In CodeBuild > Create Build Project:
- Source: GitHub (OAuth App)
- Left source version blank
- Enabled privileged mode
- Modified the buildspec file to look in the correct folder
- Used the existing IAM role I created
- Artifacts: Amazon S3 → selected the bucket I created above

I started a build — it worked and pushed the image to ECR.

Creating CodePipeline
---------------------
I went to CodePipeline > Create Pipeline and selected "Custom pipeline":
- Let AWS create a service role for me

Source Stage:
- Provider: GitHub (OAuth)
- Repository: 2048 game repo
- Branch: main

Build Stage:
- Provider: AWS CodeBuild
- Project: `2048-game-build`

Deploy Stage:
- Provider: Amazon ECS
- Cluster: `2048-game-cluster`
- Service: `2048-service`

After creating the pipeline, everything was ready to test.

Testing the Pipeline
--------------------
I opened `index.html` and changed the title on line 22 to:

    <h1 class="title">2048 - Eric's Edition</h1>

Then I committed and pushed the change:

    git add .
    git commit -m "Changed game title"
    git push origin main

The pipeline triggered automatically — it built the new image, pushed it to ECR, and ECS deployed the update.

To verify, I went to ECS > Cluster > `2048-game-cluster` → Tasks tab → clicked on the latest running task.

Under the Networking tab, I found the public IP and opened:

    http://<ip_address>:80

The new game title showed up. The CI/CD pipeline worked!
