AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Serverless Microservice Template

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: Stage name of the API
    AllowedValues:
      - dev
      - qa
      - staging
      - prod

  DomainName:
    Type: String
    Description: The custom domain name for the API (e.g., api.example.com)

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 Hosted Zone ID for DNS record creation

  AccessLogGroup:
    Type: String
    Description: Name for the CloudWatch access log group

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    OpenApiVersion: 3.0.1

Resources:

  ##################################
  # API Gateway & Custom Domain
  ##################################

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AccessLogGroup}'
      RetentionInDays: 7

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  ServerlessApi:
    Type: AWS::Serverless::Api
    DependsOn: ApiGatewayAccount
    Properties:
      Name: ProductPurchaseApi
      StageName: !Ref StageName
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AccessLogGroup}
        Format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "method":"$context.httpMethod", "resource":"$context.resourcePath", "status":"$context.status", "length":"$context.responseLength" }'
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: '/*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      Cors:
        AllowMethods: "'POST,GET,PUT,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    DependsOn: ServerlessApi
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref ApiCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ServerlessApi
      Stage: !Ref StageName

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId

  ##################################
  # SQS & DynamoDB
  ##################################

  ProductPurchaseDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: product-purchase-dlq
      MessageRetentionPeriod: 1209600  # 14 days
      SqsManagedSseEnabled: true

  ProductPurchaseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: product-purchase-queue
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProductPurchaseDLQ.Arn
        maxReceiveCount: 3

  ProductPurchaseTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ProductPurchase
      PrimaryKey:
        Name: ProductPurchaseId
        Type: String
      SSESpecification:
        SSEEnabled: true

  ##################################
  # Lambda Functions
  ##################################

  ProductPurchaseMessageSenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProductPurchaseMessageSender
      CodeUri: src/
      Handler: ProductPurchaseMessageSender.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ProductPurchaseMessageSenderExecutionRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref ProductPurchaseQueue
      Events:
        ApiEventPost:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /product-purchase
            Method: POST
        ApiEventPut:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /product-purchase/{id}
            Method: PUT
        ApiEventDelete:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /product-purchase/{id}
            Method: DELETE

  ProductPurchaseDataReaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProductPurchaseDataReader
      CodeUri: src/
      Handler: ProductPurchaseDataReader.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ProductPurchaseDataReaderExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ProductPurchaseTable
      Events:
        ApiEventGetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /product-purchase
            Method: GET
        ApiEventGetById:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /product-purchase/{id}
            Method: GET

  ProductPurchaseDataWriterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProductPurchaseDataWriter
      CodeUri: src/
      Handler: ProductPurchaseDataWriter.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ProductPurchaseDataWriterExecutionRole.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProductPurchaseQueue.Arn
            BatchSize: 10

  ##################################
  # IAM Roles
  ##################################

  ProductPurchaseMessageSenderExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ProductPurchaseMessageSenderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt ProductPurchaseQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Repeat similar IAM roles for the DataReader and DataWriter if needed
